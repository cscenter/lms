# Generated by Django 2.1.5 on 2019-01-09 13:44

import admission.models
import core.db.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import model_utils.fields
import multiselectfield.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('first_name', models.CharField(max_length=255, verbose_name='First name')),
                ('surname', models.CharField(max_length=255, verbose_name='Surname')),
                ('patronymic', models.CharField(max_length=255, verbose_name='Patronymic')),
                ('email', models.EmailField(help_text='Applicant|email', max_length=254, verbose_name='Email')),
                ('phone', models.CharField(help_text='Applicant|phone', max_length=42, verbose_name='Contact phone')),
                ('stepic_id', models.PositiveIntegerField(blank=True, help_text='Applicant|stepic_id', null=True, verbose_name='Stepik ID')),
                ('yandex_id', models.CharField(blank=True, help_text='Applicant|yandex_id', max_length=80, null=True, verbose_name='Yandex ID')),
                ('yandex_id_normalize', models.CharField(blank=True, help_text='Applicant|yandex_id_normalization', max_length=80, null=True, verbose_name='Yandex ID normalisation')),
                ('github_id', models.CharField(blank=True, help_text='Applicant|github_id', max_length=255, null=True, verbose_name='Github ID')),
                ('university2', models.CharField(blank=True, help_text='Applicant|university_legacy', max_length=255, null=True, verbose_name='University_legacy')),
                ('university_other', models.CharField(blank=True, help_text='Applicant|university_other', max_length=255, null=True, verbose_name='University (Other)')),
                ('faculty', models.TextField(help_text='Applicant|faculty', verbose_name='Faculty')),
                ('course', models.CharField(choices=[('1', '1 course bachelor, speciality'), ('2', '2 course bachelor, speciality'), ('3', '3 course bachelor, speciality'), ('4', '4 course bachelor, speciality'), ('5', 'last course speciality'), ('6', '1 course magistracy'), ('7', '2 course magistracy'), ('8', 'postgraduate'), ('9', 'graduate')], help_text='Applicant|course', max_length=355, verbose_name='Course')),
                ('graduate_work', models.TextField(blank=True, help_text='Applicant|graduate_work_or_dissertation', null=True, verbose_name='Graduate work')),
                ('experience', models.TextField(blank=True, help_text='Applicant|work_or_study_experience', null=True, verbose_name='Experience')),
                ('has_job', models.NullBooleanField(help_text='Applicant|has_job', verbose_name='Do you work?')),
                ('workplace', models.CharField(blank=True, help_text='Applicant|workplace', max_length=255, null=True, verbose_name='Workplace')),
                ('position', models.CharField(blank=True, help_text='Applicant|position', max_length=255, null=True, verbose_name='Position')),
                ('motivation', models.TextField(blank=True, help_text='Applicant|motivation_why', null=True, verbose_name='Your motivation')),
                ('additional_info', models.TextField(blank=True, help_text='Applicant|additional_info', null=True, verbose_name='Additional info from applicant about himself')),
                ('preferred_study_programs', multiselectfield.db.fields.MultiSelectField(choices=[('ds', 'Анализ данных'), ('cs', 'Современная информатика'), ('se', 'Разработка ПО')], help_text='Applicant|study_program', max_length=255, verbose_name='Study program')),
                ('preferred_study_programs_dm_note', models.TextField(blank=True, help_text='Applicant|study_program_dm', null=True, verbose_name='Study program (DM note)')),
                ('preferred_study_programs_se_note', models.TextField(blank=True, help_text='Applicant|study_program_se', null=True, verbose_name='Study program (SE note)')),
                ('preferred_study_programs_cs_note', models.TextField(blank=True, help_text='Applicant|study_program_cs', null=True, verbose_name='Study program (CS note)')),
                ('where_did_you_learn', multiselectfield.db.fields.MultiSelectField(choices=[('uni', 'плакат/листовка в университете'), ('social_net', 'пост в соц. сетях'), ('friends', 'от друзей'), ('other', 'другое'), ('habr', 'Прочитал в статье на habr.ru'), ('club', 'Из CS клуба'), ('tandp', 'Теории и практики')], help_text='Applicant|where_did_you_learn_about_cs_center', max_length=44, verbose_name='Where did you learn?')),
                ('where_did_you_learn_other', models.CharField(blank=True, max_length=255, null=True, verbose_name='Where did you learn? (other)')),
                ('your_future_plans', models.TextField(blank=True, help_text='Applicant|future_plans', null=True, verbose_name='Future plans')),
                ('admin_note', models.TextField(blank=True, help_text='Applicant|admin_note', null=True, verbose_name='Admin note')),
                ('status', models.CharField(blank=True, choices=[('rejected_test', 'Rejected by test'), ('permit_to_exam', 'Permitted to the exam'), ('rejected_exam', 'Rejected by exam'), ('rejected_cheating', 'Cheating'), ('pending', 'Pending'), ('interview_phase', 'Can be interviewed'), ('interview_assigned', 'Interview assigned'), ('interview_completed', 'Interview completed'), ('rejected_interview', 'Rejected by interview'), ('accept', 'Accept'), ('accept_if', 'Accept with condition'), ('volunteer', 'Applicant|Volunteer'), ('they_refused', 'He or she refused')], max_length=20, null=True, verbose_name='Applicant|Status')),
                ('is_unsubscribed', models.BooleanField(db_index=True, default=False, help_text='Unsubscribe from future notifications', verbose_name='Unsubscribed')),
            ],
            options={
                'verbose_name': 'Applicant',
                'verbose_name_plural': 'Applicants',
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(default=admission.models.current_year, validators=[django.core.validators.MinValueValidator(2011)], verbose_name='Campaign|Year')),
                ('online_test_max_score', models.SmallIntegerField(verbose_name='Campaign|Test_max_score')),
                ('online_test_passing_score', models.SmallIntegerField(help_text='Campaign|Test_passing_score-help', verbose_name='Campaign|Test_passing_score')),
                ('exam_max_score', models.SmallIntegerField(verbose_name='Campaign|Exam_max_score')),
                ('exam_passing_score', models.SmallIntegerField(help_text='Campaign|Exam_passing_score-help', verbose_name='Campaign|Exam_passing_score')),
                ('current', models.BooleanField(default=False, help_text='Show in application form list', verbose_name='Current campaign')),
                ('application_ends_at', models.DateTimeField(help_text='Last day for submitting application', verbose_name='Application Ends At')),
                ('access_token', models.CharField(blank=True, help_text='Yandex.Contest Access Token', max_length=255, verbose_name='Access Token')),
                ('refresh_token', models.CharField(blank=True, help_text='Yandex.Contest Refresh Token', max_length=255, verbose_name='Refresh Token')),
                ('template_name', models.CharField(blank=True, help_text='Template name for invitation email message', max_length=255, verbose_name='Template Name')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Text')),
                ('score', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(-2), django.core.validators.MaxValueValidator(2)], verbose_name='Score')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
            },
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Testing'), (2, 'Exam')], verbose_name='Type')),
                ('contest_id', models.CharField(blank=True, help_text='Applicant|yandex_contest_id', max_length=42, null=True, verbose_name='Contest #ID')),
                ('details', jsonfield.fields.JSONField(blank=True, validators=[admission.models.validate_json_container], verbose_name='Details')),
                ('file', models.FileField(blank=True, help_text='Make sure file does not include solutions due to it visible with direct url link', upload_to=admission.models.contest_assignments_upload_to, verbose_name='Assignments in pdf format')),
            ],
            options={
                'verbose_name': 'Contest',
                'verbose_name_plural': 'Contests',
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('details', jsonfield.fields.JSONField(blank=True, null=True, verbose_name='Details')),
                ('yandex_contest_id', models.CharField(blank=True, help_text='Applicant|yandex_contest_id', max_length=42, null=True, verbose_name='Contest #ID')),
                ('score', core.db.models.ScoreField(decimal_places=2, max_digits=6, null=True, verbose_name='Score')),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
            },
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('date', models.DateTimeField(verbose_name='When')),
                ('status', models.CharField(choices=[('approval', 'Approval'), ('deferred', 'Deferred'), ('canceled', 'Canceled'), ('waiting', 'Approved'), ('completed', 'Completed')], default='approval', max_length=15, verbose_name='Interview|Status')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
            ],
            options={
                'verbose_name': 'Interview',
                'verbose_name_plural': 'Interviews',
            },
        ),
        migrations.CreateModel(
            name='InterviewAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='InterviewAssignments|name')),
                ('description', models.TextField(help_text='TeX support', verbose_name='Assignment description')),
                ('solution', models.TextField(blank=True, help_text='TeX support', null=True, verbose_name='Assignment solution')),
            ],
            options={
                'verbose_name': 'Interview assignment',
                'verbose_name_plural': 'Interview assignments',
            },
        ),
        migrations.CreateModel(
            name='InterviewInvitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('secret_code', models.UUIDField(default=uuid.uuid4, verbose_name='Secret code')),
                ('expired_at', models.DateTimeField(help_text='Time in UTC since information about city timezone stored in m2m relationship', verbose_name='Expired at')),
            ],
            options={
                'verbose_name': 'Interview invitation',
                'verbose_name_plural': 'Interview invitations',
            },
        ),
        migrations.CreateModel(
            name='InterviewSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('start_at', models.TimeField(verbose_name='Interview start')),
                ('end_at', models.TimeField(verbose_name='Interview end')),
            ],
            options={
                'verbose_name': 'Interview slot',
                'verbose_name_plural': 'Interview slots',
                'ordering': ['start_at'],
            },
        ),
        migrations.CreateModel(
            name='InterviewStream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('date', models.DateField(verbose_name='Interview day')),
                ('start_at', models.TimeField(verbose_name='Period start')),
                ('end_at', models.TimeField(verbose_name='Period end')),
                ('duration', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(10)], verbose_name='Slot duration')),
                ('with_assignments', models.BooleanField(help_text='Based on this flag, student should arrive 30 min before or not', verbose_name='Has assignments')),
                ('campaign', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='interview_streams', to='admission.Campaign', verbose_name='Campaign')),
            ],
            options={
                'verbose_name': 'Interview stream',
                'verbose_name_plural': 'Interview streams',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', models.CharField(choices=[('new', 'New'), ('registered', 'Registered in contest'), ('manual', 'Manual score input')], default='new', max_length=15, verbose_name='Status')),
                ('details', jsonfield.fields.JSONField(blank=True, verbose_name='Details')),
                ('yandex_contest_id', models.CharField(blank=True, help_text='Applicant|yandex_contest_id', max_length=42, null=True, verbose_name='Contest #ID')),
                ('contest_participant_id', models.IntegerField(blank=True, editable=False, help_text='Participant ID if user registered in Yandex Contest', null=True)),
                ('contest_status_code', models.IntegerField(blank=True, editable=False, null=True, verbose_name='Yandex API Response')),
                ('score', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Score')),
                ('applicant', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='online_test', to='admission.Applicant', verbose_name='Applicant')),
            ],
            options={
                'verbose_name': 'Testing',
                'verbose_name_plural': 'Testings',
            },
        ),
    ]
