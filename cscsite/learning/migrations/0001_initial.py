# -*- coding: utf-8 -*-
# Generated by Django 1.9.12 on 2017-03-31 19:09
from __future__ import unicode_literals

import bitfield.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import learning.models
import model_utils.fields
import sorl.thumbnail.fields


def recalculate_semester_indexes(apps, schema_editor):
    from django.core.management import call_command
    call_command('recalculate_semester_indexes')


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AreaOfStudy',
            fields=[
                ('code', models.CharField(max_length=2, primary_key=True, serialize=False, verbose_name='PK|Code')),
                ('name', models.CharField(max_length=255, verbose_name='AreaOfStudy|Name')),
                ('name_ru', models.CharField(max_length=255, null=True, verbose_name='AreaOfStudy|Name')),
                ('name_en', models.CharField(max_length=255, null=True, verbose_name='AreaOfStudy|Name')),
                ('description', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='AreaOfStudy|description')),
                ('description_ru', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', null=True, verbose_name='AreaOfStudy|description')),
                ('description_en', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', null=True, verbose_name='AreaOfStudy|description')),
            ],
            options={
                'verbose_name': 'Area of study',
                'ordering': ['name'],
                'verbose_name_plural': 'Areas of study',
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('deadline_at', models.DateTimeField(verbose_name='Assignment|deadline')),
                ('is_online', models.BooleanField(default=True, verbose_name='Assignment|can be passed online')),
                ('title', models.CharField(max_length=140, verbose_name='Asssignment|name')),
                ('text', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='Assignment|text')),
                ('grade_min', models.PositiveSmallIntegerField(default=2, validators=[django.core.validators.MaxValueValidator(1000)], verbose_name='Assignment|grade_min')),
                ('grade_max', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(1000)], verbose_name='Assignment|grade_max')),
            ],
            options={
                'verbose_name': 'Assignment',
                'ordering': ['created', 'course_offering'],
                'verbose_name_plural': 'Assignments',
            },
            bases=(models.Model, object),
        ),
        migrations.CreateModel(
            name='AssignmentAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('attachment', models.FileField(upload_to=learning.models.assignmentattach_upload_to)),
            ],
            options={
                'verbose_name': 'Assignment attachment',
                'ordering': ['assignment', '-created'],
                'verbose_name_plural': 'Assignment attachments',
            },
            bases=(models.Model, object),
        ),
        migrations.CreateModel(
            name='AssignmentComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('text', models.TextField(blank=True, help_text='LaTeX+Markdown is enabled', verbose_name='AssignmentComment|text')),
                ('attached_file', models.FileField(blank=True, upload_to=learning.models.assignmentcomment_upload_to)),
            ],
            options={
                'verbose_name': 'Assignment-comment',
                'ordering': ['created'],
                'verbose_name_plural': 'Assignment-comments',
            },
        ),
        migrations.CreateModel(
            name='AssignmentNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_about_passed', models.BooleanField(default=False, verbose_name='About passed assignment')),
                ('is_about_creation', models.BooleanField(default=False, verbose_name='About created assignment')),
                ('is_about_deadline', models.BooleanField(default=False, verbose_name='About change of deadline')),
                ('is_unread', models.BooleanField(default=True, verbose_name='Unread')),
                ('is_notified', models.BooleanField(default=False, verbose_name='User is notified')),
            ],
            options={
                'verbose_name': 'Assignment notification',
                'ordering': ['-created'],
                'verbose_name_plural': 'Assignment notifications',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=140, verbose_name='Course|name')),
                ('name_ru', models.CharField(max_length=140, null=True, verbose_name='Course|name')),
                ('name_en', models.CharField(max_length=140, null=True, verbose_name='Course|name')),
                ('slug', models.SlugField(help_text='Short dash-separated string for human-readable URLs, as in test.com/news/<b>some-news</b>/', max_length=70, unique=True, verbose_name='News|slug')),
                ('description', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='Course|description')),
                ('description_ru', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', null=True, verbose_name='Course|description')),
                ('description_en', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', null=True, verbose_name='Course|description')),
            ],
            options={
                'verbose_name': 'Course',
                'ordering': ['name'],
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='CourseClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('type', model_utils.fields.StatusField(choices=[('lecture', 'Lecture'), ('seminar', 'Seminar')], default='lecture', max_length=100, no_check_for_status=True, verbose_name='Type')),
                ('name', models.CharField(max_length=255, verbose_name='CourseClass|Name')),
                ('description', models.TextField(blank=True, help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='Description')),
                ('slides', models.FileField(blank=True, upload_to=learning.models.courseclass_slides_file_name, verbose_name='Slides')),
                ('slides_url', models.URLField(blank=True, verbose_name='SlideShare URL')),
                ('video_url', models.URLField(blank=True, help_text='Both YouTube and Yandex Video are supported', verbose_name='Video URL')),
                ('other_materials', models.TextField(blank=True, help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='CourseClass|Other materials')),
                ('date', models.DateField(verbose_name='Date')),
                ('starts_at', models.TimeField(verbose_name='Starts at')),
                ('ends_at', models.TimeField(verbose_name='Ends at')),
            ],
            options={
                'verbose_name': 'Class',
                'ordering': ['-date', 'course_offering', '-starts_at'],
                'verbose_name_plural': 'Classes',
            },
            bases=(models.Model, object),
        ),
        migrations.CreateModel(
            name='CourseClassAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('material', models.FileField(upload_to='course_class_attachments')),
            ],
            options={
                'verbose_name': 'Class attachment',
                'ordering': ['course_class', '-created'],
                'verbose_name_plural': 'Class attachments',
            },
            bases=(models.Model, object),
        ),
        migrations.CreateModel(
            name='CourseOffering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('grading_type', models.SmallIntegerField(choices=[(0, 'Default'), (1, 'Binary')], default=0, verbose_name='CourseOffering|grading_type')),
                ('capacity', models.PositiveSmallIntegerField(default=0, help_text='0 - unlimited', verbose_name='CourseOffering|capacity')),
                ('description', models.TextField(blank=True, help_text='LaTeX+Markdown+HTML is enabled; empty description will be replaced by course description', verbose_name='Description')),
                ('description_ru', models.TextField(blank=True, help_text='LaTeX+Markdown+HTML is enabled; empty description will be replaced by course description', null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, help_text='LaTeX+Markdown+HTML is enabled; empty description will be replaced by course description', null=True, verbose_name='Description')),
                ('reviews', models.TextField(blank=True, null=True, verbose_name='Course reviews')),
                ('survey_url', models.URLField(blank=True, help_text='Link to Survey', verbose_name='Survey URL')),
                ('is_published_in_video', models.BooleanField(default=False, verbose_name='Published in video section')),
                ('is_open', models.BooleanField(default=False, help_text='This course offering will be available on ComputerScience Club website so anyone can join', verbose_name='Open course offering')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Course already completed')),
                ('language', models.CharField(choices=[('ru', 'Russian'), ('en', 'English')], db_index=True, default='ru', max_length=5)),
            ],
            options={
                'verbose_name': 'Course offering',
                'ordering': ['-semester', 'course__created'],
                'verbose_name_plural': 'Course offerings',
            },
        ),
        migrations.CreateModel(
            name='CourseOfferingNews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(max_length=140, verbose_name='CourseNews|title')),
                ('text', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='CourseNews|text')),
            ],
            options={
                'verbose_name': 'Course news-singular',
                'ordering': ['-created'],
                'verbose_name_plural': 'Course news-plural',
            },
        ),
        migrations.CreateModel(
            name='CourseOfferingNewsNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_unread', models.BooleanField(default=True, verbose_name='Unread')),
                ('is_notified', models.BooleanField(default=False, verbose_name='User is notified')),
            ],
            options={
                'verbose_name': 'Course offering news notification',
                'ordering': ['-created'],
                'verbose_name_plural': 'Course offering news notifications',
            },
        ),
        migrations.CreateModel(
            name='CourseOfferingTeacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roles', bitfield.models.BitField((('lecturer', 'Lecturer'), ('reviewer', 'Reviewer')), default=1)),
                ('notify_by_default', models.BooleanField(default=False, help_text='Add teacher to assignment notify settings by default', verbose_name='Notify by default')),
            ],
            options={
                'verbose_name': 'Course Offering teacher',
                'verbose_name_plural': 'Course Offering teachers',
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('grade', model_utils.fields.StatusField(choices=[('not_graded', 'Not graded'), ('unsatisfactory', 'Enrollment|Unsatisfactory'), ('pass', 'Enrollment|Pass'), ('good', 'Good'), ('excellent', 'Excellent')], default='not_graded', max_length=100, no_check_for_status=True, verbose_name='Enrollment|grade')),
                ('grade_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='grade', verbose_name='Enrollment|grade changed')),
            ],
            options={
                'verbose_name': 'Enrollment',
                'ordering': ['student', 'course_offering'],
                'verbose_name_plural': 'Enrollments',
            },
        ),
        migrations.CreateModel(
            name='InternationalSchool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=255, verbose_name='InternationalSchool|name')),
                ('link', models.URLField(verbose_name='InternationalSchool|Link')),
                ('place', models.CharField(max_length=255, verbose_name='InternationalSchool|place')),
                ('deadline', models.DateField(verbose_name='InternationalSchool|Deadline')),
                ('starts_at', models.DateField(verbose_name='InternationalSchool|Start')),
                ('ends_at', models.DateField(blank=True, null=True, verbose_name='InternationalSchool|End')),
                ('has_grants', models.BooleanField(default=False, verbose_name='InternationalSchool|Grants')),
            ],
            options={
                'verbose_name_plural': 'International schools',
                'verbose_name': 'International school',
                'ordering': ['name'],
                'db_table': 'international_schools',
            },
        ),
        migrations.CreateModel(
            name='Internship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('question', models.CharField(max_length=255, verbose_name='Question')),
                ('answer', models.TextField(verbose_name='Answer')),
                ('sort', models.SmallIntegerField(blank=True, null=True, verbose_name='Sort order')),
            ],
            options={
                'verbose_name': 'Internship',
                'ordering': ['sort'],
                'verbose_name_plural': 'Internships',
            },
        ),
        migrations.CreateModel(
            name='NonCourseEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=255, verbose_name='CourseClass|Name')),
                ('description', models.TextField(blank=True, help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='Description')),
                ('date', models.DateField(verbose_name='Date')),
                ('starts_at', models.TimeField(verbose_name='Starts at')),
                ('ends_at', models.TimeField(verbose_name='Ends at')),
            ],
            options={
                'verbose_name': 'Non-course event',
                'ordering': ['-date', '-starts_at', 'name'],
                'verbose_name_plural': 'Non-course events',
            },
        ),
        migrations.CreateModel(
            name='OnlineCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='start')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='end')),
                ('name', models.CharField(max_length=255, verbose_name='Course|name')),
                ('teachers', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='Online Course|teachers')),
                ('description', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='Online Course|description')),
                ('link', models.URLField(verbose_name='Online Course|Link')),
                ('photo', sorl.thumbnail.fields.ImageField(blank=True, upload_to='online_courses/', verbose_name='Online Course|photo')),
                ('is_au_collaboration', models.BooleanField(default=False, verbose_name='Collaboration with AY')),
                ('is_self_paced', models.BooleanField(default=False, verbose_name='Without deadlines')),
            ],
            options={
                'verbose_name_plural': 'Online courses',
                'verbose_name': 'Online course',
                'ordering': ['name'],
                'db_table': 'online_courses',
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1990)], verbose_name='Year')),
                ('type', model_utils.fields.StatusField(choices=[('spring', 'spring'), ('summer', 'summer'), ('autumn', 'autumn')], default='spring', max_length=100, no_check_for_status=True, verbose_name='Semester|type')),
                ('enrollment_start_at', models.DateField(blank=True, help_text='Try to fix travis', null=True, verbose_name='Enroll before')),
                ('enroll_before', models.DateField(blank=True, help_text='Students can enroll on or leave the course before this date (inclusive)', null=True, verbose_name='Enroll before')),
                ('report_starts_at', models.DateField(blank=True, help_text='Start point of project report period.', null=True, verbose_name='Report start')),
                ('report_ends_at', models.DateField(blank=True, help_text='End point of project report period.', null=True, verbose_name='Report end')),
                ('projects_grade_excellent', models.SmallIntegerField(blank=True, help_text='Semester|projects_grade_excellent', null=True, verbose_name='Projects|Border for excellent')),
                ('projects_grade_good', models.SmallIntegerField(blank=True, help_text='Semester|projects_grade_good', null=True, verbose_name='Projects|Border for good')),
                ('projects_grade_pass', models.SmallIntegerField(blank=True, help_text='Semester|projects_grade_pass', null=True, verbose_name='Projects|Border for pass')),
                ('index', models.PositiveSmallIntegerField(editable=False, help_text='System field. Used for sort order and filter.', verbose_name='Semester index')),
            ],
            options={
                'verbose_name': 'Semester',
                'ordering': ['-year', 'type'],
                'verbose_name_plural': 'Semesters',
            },
        ),
        migrations.CreateModel(
            name='StudentAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('grade', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Grade')),
                ('grade_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='grade', verbose_name='Assignment|grade changed')),
                ('first_submission_at', models.DateTimeField(editable=False, null=True, verbose_name='Assignment|first_submission')),
                ('last_comment_from', models.PositiveSmallIntegerField(default=0, editable=False, help_text='0 - no comments yet, 1 - from student, 2 - from teacher', verbose_name='Last comment from')),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning.Assignment', verbose_name='StudentAssignment|assignment')),
            ],
            options={
                'verbose_name': 'Assignment-student',
                'ordering': ['assignment', 'student'],
                'verbose_name_plural': 'Assignment-students',
            },
        ),
        migrations.CreateModel(
            name='StudyProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1990)], verbose_name='Year')),
                ('description', models.TextField(blank=True, help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', null=True, verbose_name='StudyProgram|description')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning.AreaOfStudy', verbose_name='Area of Study')),
                ('city', models.ForeignKey(default='spb', on_delete=django.db.models.deletion.CASCADE, to='core.City', verbose_name='City')),
            ],
            options={
                'verbose_name': 'Study Program',
                'verbose_name_plural': 'Study Programs',
            },
        ),
        migrations.CreateModel(
            name='StudyProgramCourseGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courses', models.ManyToManyField(help_text='Courses will be grouped with boolean OR', to='learning.Course', verbose_name='StudyProgramCourseGroup|courses')),
                ('study_program', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='course_groups', to='learning.StudyProgram', verbose_name='Study Program')),
            ],
            options={
                'verbose_name': 'Study Program Course',
                'verbose_name_plural': 'Study Program Courses',
            },
        ),
        migrations.CreateModel(
            name='Useful',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255, verbose_name='Question')),
                ('answer', models.TextField(verbose_name='Answer')),
                ('sort', models.SmallIntegerField(blank=True, null=True, verbose_name='Sort order')),
                ('site', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='sites.Site', verbose_name='Site')),
            ],
            options={
                'verbose_name': 'Useful',
                'ordering': ['sort'],
                'verbose_name_plural': 'Useful',
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=140, verbose_name='Venue|Name')),
                ('address', models.CharField(blank=True, help_text='Should be resolvable by Google Maps', max_length=500, verbose_name='Venue|Address')),
                ('description', models.TextField(help_text='How to style text read <a href="/commenting-the-right-way/" target="_blank">here</a>. Partially HTML is enabled too.', verbose_name='Description')),
                ('is_preferred', models.BooleanField(default=False, help_text='Will be displayed on top of the venue list', verbose_name='Preferred')),
                ('city', models.ForeignKey(blank=True, default='spb', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.City')),
                ('sites', models.ManyToManyField(to='sites.Site')),
            ],
            options={
                'verbose_name': 'Venue',
                'ordering': ['-is_preferred', 'name'],
                'verbose_name_plural': 'Venues',
            },
        ),
        migrations.RunPython(recalculate_semester_indexes),
    ]
