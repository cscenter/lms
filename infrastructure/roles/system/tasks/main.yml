---
- name: Upgrade all packages to the latest version
  apt:
    upgrade: dist
    update_cache: yes

- name: set default locale LANG to UTF-8
  lineinfile: dest=/etc/default/locale line='LANG="en_US.utf8"' regexp='^LANG=' state=present insertafter=BOF

- name: set default locale LC_ALL to UTF-8
  lineinfile: dest=/etc/environment line='LC_ALL="en_US.utf8"' regexp='^LC_ALL=' state=present insertafter=BOF

- name: check if a reboot is required
  stat: path=/var/run/reboot-required get_md5=no
  register: reboot_file

# Reboot issue: https://github.com/ansible/ansible/issues/14413
- name: reboot the server
  command: /sbin/reboot removes=/var/run/reboot-required
  when: reboot_file.stat.exists == true

- name: Wait for server to go offline (because of reboot)
  local_action: wait_for host="{{ inventory_hostname }}" port=22 state=stopped
  become: false
  when: reboot_file.stat.exists == true

- name: Add python PPAs
  apt_repository:
    repo: "{{ item }}"
    update_cache: yes
  with_items:
    - 'ppa:deadsnakes/ppa'

- name: Unlock python package for upgrade if it was hold before.
  dpkg_selections:
    name: "{{ python_pkg }}"
    selection: install

- name: Apt dependencies
  apt:
    name:
      - python-setuptools
  #    - python-dev
      - git
      - ntp
      - zsh
      - tmux
      - htop
      - build-essential
      # app dependencies
      - gettext
      # regular expressions support
      - libpcre3-dev
      - libpcre3
      - libxml2-dev
      - libxslt1-dev
      - libjpeg-dev
      - libpng-dev
      - libmagic-dev
      - libcurl4-gnutls-dev
      - libgnutls28-dev
      - "{{ python_pkg }}"
      - "{{ python_pkg }}-dev"
      - python-pycurl
      # LDAP support
      - ldap-utils
      - libldap2-dev
      - libsasl2-dev
      # - libssl-dev not sure we need this package to install python-ldap with pip
    state: present

- name: Get pip{{ python_version }} version
  command: pip{{ python_version }} --version
  register: pip_version_output
  ignore_errors: yes

- name: Download get-pip.py
  get_url: url=https://bootstrap.pypa.io/get-pip.py
           dest=/tmp/get-pip.py
  when: pip_version_output is failed

- name: install pip for {{ python_pkg }}
  command: "{{ python_pkg }} /tmp/get-pip.py"
  when: pip_version_output is failed

- name: Install pip for system python3 (will be placed in /usr/bin/pip3)
  apt: name=python3-pip state=present

- name: install global python 3 dependencies
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
    executable: pip{{ python_version }}
  with_items:
    - name: ipython
      version: "5.5.0"
    - name: virtualenv
      version: "16.0.0"
    - name: uwsgi
      version: "2.0.17"
    - name: uwsgitop
      version: "0.10"

- name: Create uwsgi config dir
  file:
    path: /etc/uwsgi
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Copy systemd uwsgi config
  template:
    src: emperor.uwsgi.service.jinja2
    dest: /etc/systemd/system/uwsgi.service
  tags:
    - uwsgi

- name: Copy uWSGI emperor.ini config
  template:
    src: emperor.ini.jinja2
    dest: /etc/uwsgi/emperor.ini
  tags:
    - uwsgi

- name: Create uwsgi config dir
  file: path=/etc/uwsgi/vassals state=directory
  tags:
    - uwsgi

- name: Ensure uWSGI is enabled after reboot
  systemd:
    name: uwsgi.service
    enabled: yes

- name: Setup zsh for ec2 user
  include_tasks: zsh.yml
  with_items:
    - "{{ aws_ec2_user }}"

- name: Setup ntpd
  import_tasks: ntp.yml
  tags:
    - ntpd
    - ntp