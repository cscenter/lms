---

- name: Check mandatory variables before doing anything
  fail:
    msg: "Variable '{{ item }}' is not defined"
  when: item not in vars
  loop:
    - main_domain
    - site_user
    - site_user_group
    - repo_root
    - virtualenv_root
    - media_root
    - static_root
    - backup_root
    - site_dir_name
    - apps_dir_name
    - app_settings
    - app_environment
    - repo_url
    - db_name
    - db_user
    - db_user_password
    - default_server
    - setup_cronjobs
    - certbot_domains
    - certbot_config_dir
    - rq_workers
    - rq_workers_target_service_name
    - processes_num
    - log_to_file
  tags:
    - always

# TODO: check uwsgi/nginx configs are exist

- name: Create users and groups
  import_tasks: users.yml
  tags:
    - users

- name: Create application directory structure
  file:
    path: "/home/{{ site_user }}/site/{{ item }}"
    state: directory
    owner: "{{ site_user }}"
  with_items:
    - logs

- name: clone website repo
  become: yes
  become_user: "{{ site_user }}"
  git:
    accept_hostkey: yes
    repo: "{{ repo_url }}"
    dest: "/home/{{ site_user }}/site/repo"
    key_file: "/home/{{ site_user }}/.ssh/id_rsa"

- name: Ensure folder for file-based cache exists
  file: path=/tmp/django_cache mode=777 state=directory

- name: Nginx status
  stat: path=/etc/init.d/nginx
  register: nginx_status
  tags:
    - nginx

- name: Copy nginx config
  template:
    src: "{{ main_domain }}/nginx.conf.jinja2"
    dest: "/etc/nginx/sites-available/{{ main_domain }}.conf"
  tags:
    - nginx
  register: nginx_config
  when: nginx_status.stat.exists

- name: Symlink nginx config
  file:
    src: "/etc/nginx/sites-available/{{ main_domain }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ main_domain }}.conf"
    state: link
  tags:
    - nginx
  when: nginx_status.stat.exists

- name: Reload nginx configuration
  service:
    name: nginx
    state: reloaded
  tags:
    - nginx
  when: nginx_status.stat.exists and nginx_config.changed

- name: Configure certbot to auto-renew tls certificates
  include: certbot.yml
  when: nginx_status.stat.exists and enable_https
  tags:
    - certbot
    - tls

- name: Ensure Nginx is started
  service: name=nginx state=started
  tags:
    - nginx
  when: nginx_status.stat.exists

- name: Install app dependencies
  import_tasks: venv.yml
  notify: restart_uwsgi
  tags:
    - venv

- import_tasks: systemd.yml
  when: rq_workers|length > 0

- name: Copy uwsgi config
  template:
    src: "{{ main_domain }}/uwsgi.ini.jinja2"
    dest: "/etc/uwsgi/vassals/{{ main_domain }}.ini"
    owner: "{{ site_user }}"
  notify: restart_uwsgi
  tags:
    - uwsgi

- name: Get stat about media root
  stat:
    path: "{{ media_root }}"
  register: media_root_stat

- name: Create media/ directory
  file:
    path: "{{ media_root }}"
    state: directory
    owner: "ubuntu"
    group: "{{ site_user_group }}"
    mode: 0775
  when: not media_root_stat.stat.exists

- name: Restore file and dir owners if "{{ media_root }}" were exist before
  shell: "chown -R {{ site_user }}:{{ site_user_group }} {{ media_root }}"
  become: yes
  run_once: yes
  when: media_root_stat.stat.exists

- name: Create tmp directory for django-dbbackup
  file:
    path: "{{ backup_root }}"
    state: directory
    owner: "ubuntu"
    group: "{{ site_user_group }}"
    mode: 0775

- name: Configure db
  import_tasks: db.yml
  tags:
    - db

- name: Run collectstatic
  become_user: "{{ site_user }}"
  django_manage:
    command: "collectstatic"
    app_path: "/home/{{ site_user }}/site/repo"
    settings: "{{ app_settings }}.settings.{{ app_environment }}"
    virtualenv: "{{ virtualenv_root }}"
  tags:
    - collectstatic

- name: Set up cron jobs
  import_tasks: cronjobs.yml
  when: setup_cronjobs
  tags:
    - cronjobs
