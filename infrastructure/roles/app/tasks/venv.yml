---
# TODO: restart uwsgi, restart rqworkers (!)

- name: Check if python is installed
  package:
    name: "python{{ python_version }}"
    state: present
  check_mode: true
  register: python_installed

- name: Get stat about virtualenv directory
  stat:
    path: "{{ virtualenv_root }}"
  register: venv_dir

- name: Get virtualenv python version if venv already exists
  shell: "{{ virtualenv_root }}/bin/python --version 2>&1"
  register: python_venv_version_installed
  when: venv_dir.stat.exists

- name: Get current python 3.x version
  shell: "python{{ python_version }} --version 2>&1"
  register: python_version_installed

- name: Remove venv if version has changed
  file:
    path: "{{ virtualenv_root }}"
    state: absent
  when: venv_dir.stat.exists and python_venv_version_installed.stdout != python_version_installed.stdout

- name: Install pipenv inside virtual environment. If the virtualenv does not exist, it will be created before installing packages
  become: yes
  become_user: "{{ site_user }}"
  pip:
    name: "pipenv"
    virtualenv: "{{ virtualenv_root }}"
    virtualenv_python: "python{{ python_version }}"

- name: Install requirements
  environment:
    VIRTUAL_ENV: "{{ virtualenv_root }}"
  command: "{{ virtualenv_root }}/bin/pipenv sync"
  args:
    chdir: "{{ repo_root }}"
  become: yes
  become_user: "{{ site_user }}"

- name: Prevent python from being upgraded with `apt-get upgrade` (it can break venv)
  dpkg_selections:
    name: "python{{ python_version }}"
    selection: hold