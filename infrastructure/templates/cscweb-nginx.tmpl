upstream django {
    server unix:///tmp/uwsgi_{{ cscweb_project }}.socket;
}

server {
    listen 80;
    server_name compscicenter.ru www.compscicenter.ru;

    return 301 https://compscicenter.ru$request_uri;
}

server {
    listen 443 ssl;
    server_name www.compscicenter.ru;

    ssl_certificate /etc/nginx/crypto/server_bundle.crt;
    ssl_certificate_key /etc/nginx/crypto/server_key.crt;

    return 301 https://compscicenter.ru$request_uri;
}

server {
    listen 80;
    server_name compscicenter.ru www.compscicenter.ru _;
    charset utf-8;
    client_max_body_size 42m;

    location /media  {
        alias /home/{{ cscweb_user }}/site/repo/cscsite/media;
        access_log off;
        tcp_nodelay off;
        # gzip_static on;
        gzip on;
        expires 6h;
        add_header Cache-Control public,max-age=21600;
    }

    location /static {
        alias /home/{{ cscweb_user }}/site/repo/cscsite/static;
        access_log off;
        tcp_nodelay off;
        # FIXME(Dmitry): do this statically
        # gzip_static on;
        gzip on;
        expires 6h;
        add_header Cache-Control public,max-age=21600;
    }

    # Django
    location / {
        # FIXME(Dmitry): this makes TLS vulnerable to BREACH attack
        gzip on;
        uwsgi_pass django;
        include uwsgi_params;
    }
}

server {
    listen 443 ssl;
    server_name compscicenter.ru www.compscicenter.ru _;
    charset utf-8;
    client_max_body_size 42m;

    # ssl config by Mozilla https://wiki.mozilla.org/Security/Server_Side_TLS

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /etc/nginx/crypto/server_bundle.crt;
    ssl_certificate_key /etc/nginx/crypto/server_key.crt;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/nginx/crypto/dhparam.pem;

    # modern configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/nginx/crypto/intermediate_bundle.crt;

    resolver 8.8.8.8;

    location /media  {
        alias /home/{{ cscweb_user }}/site/repo/cscsite/media;
        access_log off;
        tcp_nodelay off;
        # gzip_static on;
        gzip on;
        expires 6h;
        add_header Cache-Control public,max-age=21600;
    }

    location /static {
        alias /home/{{ cscweb_user }}/site/repo/cscsite/static;
        access_log off;
        tcp_nodelay off;
        # FIXME(Dmitry): do this statically
        # gzip_static on;
        gzip on;
        expires 6h;
        add_header Cache-Control public,max-age=21600;
    }

    # Django
    location / {
        # FIXME(Dmitry): this makes TLS vulnerable to BREACH attack
        gzip on;
        uwsgi_pass django;
        include uwsgi_params;
    }
}
