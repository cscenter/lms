---
# Note: See `group_vars/all.yml` for variables shared between playbooks

- name: provision EC2 instance
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Remove if no backup volumes was created before (we are launching purely
    # new instance or manually removed all backup volumes for prev version)
    aws_ec2_prev_host_tag: "cscweb_new"
    aws_ec2_host: tag_Name_{{ aws_ec2_instance_tag }}
    aws_ec2_region: eu-central-1
    aws_ec2_instance_type: t2.medium
    aws_ec2_instance_volume_size: 10
    aws_ec2_keypair: csc
    # Ubuntu 16.04 hvm ssd
    aws_ec2_image: ami-c7e0c82c
    attach_second_volume: yes
    second_volume_size: 30
    second_volume_device_name: "/dev/xvdf"
    security_groups:
      - name: ssh
        desc: the security group for ssh-available server
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      - name: web
        desc: the security group for the web server
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

  tasks:
    - name: Gather facts about any instance with tag "{{ aws_ec2_instance_tag }}"
      ec2_instance_facts:
        filters:
          "tag:Name": "{{ aws_ec2_instance_tag }}"
      register: ec2_instances_lookup

    - name: Check ec2 instance already exists
      fail:
        msg: "EC2 instance with tag.Name '{{ aws_ec2_instance_tag }}' already exists"
      when: ec2_instances_lookup["instances"]|length > 0

    - name: Create required network security groups
      ec2_group:
        name: "{{ item.name }}"
        description: "{{ item.desc }}"
        rules: "{{ item.rules }}"
        rules_egress: "{{ item.rules_egress }}"
        region: "{{ aws_ec2_region }}"
      with_items: "{{ security_groups }}"

    - name: Launch instance
      ec2:
        region: "{{ aws_ec2_region }}"
        keypair: "{{ aws_ec2_keypair }}"
        instance_type: "{{ aws_ec2_instance_type }}"
        image: "{{ aws_ec2_image }}"
        group:
          - web
          - ssh
        instance_tags:
          Name: "{{ aws_ec2_instance_tag }}"
        exact_count: 1
        count_tag:
          Name: "{{ aws_ec2_instance_tag }}"
        # TODO: add tag:Name to the root device
        volumes:
          - device_name: /dev/sda1
            volume_size: "{{ aws_ec2_instance_volume_size }}"
            volume_type: gp2
        wait: true
      register: ec2

    - name: display info for newly created instance
      debug:
        msg: "{{ ec2 }}"

    - name: display an IP of newly launched instance
      debug:
        msg: "{{ ec2.instances[0].public_ip }}"
      when: ec2.instances|length > 0

    - name: display an id of newly launched instance
      debug:
        msg: "{{ ec2.instances[0].id }}"
      when: ec2.instances|length > 0

    - name: wait for SSH to become available
      local_action:
        wait_for host="{{ ec2.instances[0].public_ip }}" port=22 timeout=600
      when: ec2.instances|length > 0

    - name: add launched instances to host group
      local_action: add_host hostname={{ item.public_ip }} groupname={{ aws_ec2_host }}
      loop: "{{ ec2.tagged_instances }}"

    - name: Get info about all related backup snapshots
      ec2_snapshot_facts:
        region: "{{ aws_ec2_region }}"
        filters:
          "tag:Name": "{{ aws_ec2_prev_host_tag }}"
          status: completed
      register: snapshots_data
      when: aws_ec2_prev_host_tag is defined and attach_second_volume

    - name: Find newest backup snapshot
      set_fact: newest_snapshot={{ snapshots_data.snapshots | sort(attribute='start_time') | last }}
      when: aws_ec2_prev_host_tag is defined and attach_second_volume and snapshots_data.snapshots | length > 0

    - set_fact: snapshot_id={{ newest_snapshot.snapshot_id }}
      when: newest_snapshot is defined and newest_snapshot.snapshot_id

    - name: Create volume and attach it to the EC2 instance
      ec2_vol:
        region: "{{ aws_ec2_region }}"
        snapshot: "{{ snapshot_id|default(omit) }}"
        instance: "{{ ec2.tagged_instances[0].id }}"
        volume_size: "{{ second_volume_size }}"
        volume_type: gp2
        device_name: "{{ second_volume_device_name }}"
        tags:
          Name: "{{ aws_ec2_instance_tag }}"
          # TODO: Sync `EBSBackup` name (and value) with create_snapshot.py.jinja2
          EBSBackup: "Yes"
      register: ec2_vol
      when: attach_second_volume

    - name: EBS volumes backup automation
      include_role:
        name: backup_ebs
