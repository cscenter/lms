---
- name: Start deployment
  hosts: "{{ aws_ec2_host }}"
  user: "{{ aws_ec2_user }}"
  vars:
    repo_url: git@github.com:cscenter/site.git
    aws_ec2_user: ubuntu
    app_environment: production
    site_user: cscenter
    app_settings: "{{ site_user }}"

  tasks:
  - name: Check site_user value
    fail:
      msg: "`site_user` var should be one of [cscenter, csclub]"
    when: site_user != "cscenter" and site_user != "csclub"

  - name: Set variables
    set_fact:
      repo_dir: "/home/{{ site_user }}/site/repo"
      venv_dir: "/home/{{ site_user }}/site/env"
      cached_pipfile_lock_hash_file: ".cached_pipfile_lock_hash_file"
      # Default value when fail on fetching from the remote server
      local_pipfile_lock_hash: ""

  - name: Get stuff from git
    git: repo={{ repo_url }} dest={{ repo_dir }}
    become: yes
    become_user: "{{ site_user }}"

  - name: Read current Pipfile.lock data into memory
    slurp:
      path: '{{ repo_dir }}/Pipfile.lock'
    register: pipfile_lock_data

  - name: Get current Pipfile.lock hash
    set_fact:
      pipfile_lock_hash: "{{ pipfile_lock_data.content | b64decode | from_json | json_query('_meta.hash.sha256') }}"

  - name: Try to fetch file with Pipfile.lock hash value from the previous deploy
    fetch:
      src: "/home/{{ site_user }}/site/{{ cached_pipfile_lock_hash_file }}"
      dest: "tmp/{{ inventory_hostname }}_{{ site_user }}_{{ cached_pipfile_lock_hash_file }}"
      flat: yes
      fail_on_missing: no
    become: yes
    become_user: "{{ site_user }}"

  - name: Get stats for the fetched file
    local_action: stat path="tmp/{{ inventory_hostname }}_{{ site_user}}_{{ cached_pipfile_lock_hash_file }}"
    register: local_pipfile_lock_hash_file

  - name: Try to read hash value from the previous deploy
    set_fact:
      local_pipfile_lock_hash: "{{ lookup('file', 'tmp/{{ inventory_hostname }}_{{ site_user }}_{{ cached_pipfile_lock_hash_file }}') }}"
    when: local_pipfile_lock_hash_file.stat.exists == True

  - name: Install requirements if they were changed from the previous deploy
    environment:
      VIRTUAL_ENV: "{{ venv_dir }}"
    command: "{{ venv_dir }}/bin/pipenv sync"
    args:
      chdir: "{{ repo_dir }}"
    become: yes
    become_user: "{{ site_user }}"
    when: pipfile_lock_hash != local_pipfile_lock_hash

  - name: Update cache with Pipfile.lock hash value
    copy:
      content: "{{ pipfile_lock_hash }}"
      dest: "/home/{{ site_user }}/site/{{ cached_pipfile_lock_hash_file }}"
    become: yes
    become_user: "{{ site_user }}"
    when: pipfile_lock_hash != local_pipfile_lock_hash

  - name: Collectstatic
    become: yes
    become_user: "{{ site_user }}"
    django_manage:
      command: "collectstatic --noinput"
      app_path: "{{ repo_dir }}"
      settings: "{{ app_settings }}.settings.{{ app_environment }}"
      virtualenv: "{{ venv_dir }}"

  - name: Migrate DB
    become: yes
    become_user: "{{ site_user }}"
    django_manage:
      command: "migrate"
      app_path: "{{ repo_dir }}"
      settings: "{{ app_settings }}.settings.{{ app_environment }}"
      virtualenv: "{{ venv_dir }}"

  - name: Touch config file to reload uwsgi
    file: path=/etc/uwsgi/vassals/{{ site_user }}.ini state=touch
    become: yes
    become_method: sudo

  - name: Gracefully restart rq workers
    become: yes
    become_method: sudo
    # XXX: `default` and `high` queues are shared between sites,
    # but could be restarted only with cscenter target unit!
    shell: "systemctl restart rqworker_{{ site_user }}.target"


